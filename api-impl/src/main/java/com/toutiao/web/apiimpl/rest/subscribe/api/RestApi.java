/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.toutiao.web.apiimpl.rest.subscribe.api;
import com.toutiao.app.api.chance.request.subscribe.ConditionSubscribeRequest;
import com.toutiao.app.domain.subscribe.UserSubscribeDetailDo;
import com.toutiao.web.api.chance.response.subscribeListModel.UserSubscribeList;
import com.toutiao.web.api.chance.response.subscribeListModel.UserSubscribeListDoList;
import com.toutiao.web.common.restmodel.NashResult;
import com.toutiao.web.dao.entity.subscribe.UserSubscribe;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-11-14T09:11:10.816Z")

@Api(value = "rest", description = "the rest API")
public interface RestApi {

    @ApiOperation(value = "删除订阅信息", nickname = "deleteConditionSubscribe", notes = "", response = Integer.class, tags={ "condition-subscribe-rest-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Integer.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/rest/subscribe/deleteConditionSubscribe",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Integer> deleteConditionSubscribe(@NotNull @ApiParam(value = "id", required = true) @Valid @RequestParam(value = "id", required = true) Integer id);


    @ApiOperation(value = "删除订阅信息", nickname = "deleteSubscribe", notes = "", response = Integer.class, tags={ "subscribe-rest-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Integer.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/rest/subscribe/deleteSubscribe",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Integer> deleteSubscribe(@NotNull @ApiParam(value = "id", required = true) @Valid @RequestParam(value = "id", required = true) Integer id);


    @ApiOperation(value = "用户获取订阅信息列表", nickname = "listConditionSubscribe", notes = "", response = UserSubscribeList.class, tags={ "condition-subscribe-rest-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserSubscribeList.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/rest/subscribe/listConditionSubscribe",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<UserSubscribeList> listConditionSubscribe();


    @ApiOperation(value = "用户获取订阅信息列表", nickname = "listIndexSubscribe", notes = "", response = UserSubscribeListDoList.class, tags={ "subscribe-rest-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserSubscribeListDoList.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/rest/subscribe/listIndexSubscribe",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<UserSubscribeListDoList> listIndexSubscribe();


    @ApiOperation(value = "用户获取订阅信息列表", nickname = "listSubscribe", notes = "", response = UserSubscribeListDoList.class, tags={ "subscribe-rest-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserSubscribeListDoList.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/rest/subscribe/listSubscribe",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<UserSubscribeListDoList> listSubscribe();


    @ApiOperation(value = "新增条件订阅", nickname = "saveConditionSubscribe", notes = "", response = UserSubscribe.class, tags={ "condition-subscribe-rest-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserSubscribe.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/rest/subscribe/saveConditionSubscribe",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<UserSubscribe> saveConditionSubscribe(@ApiParam(value = "conditionSubscribeRequest", required = true) @Valid @RequestBody ConditionSubscribeRequest conditionSubscribeRequest);


    @ApiOperation(value = "新增订阅信息", nickname = "saveSubscribe", notes = "", response = UserSubscribe.class, tags={ "subscribe-rest-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserSubscribe.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/rest/subscribe/saveSubscribe",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<UserSubscribe> saveSubscribe(@ApiParam(value = "userSubscribeDetailDo", required = true) @Valid @RequestBody UserSubscribeDetailDo userSubscribeDetailDo);


    @ApiOperation(value = "判断订阅信息是否存在", nickname = "selectByUserConditionSubscribeMap", notes = "", response = UserSubscribe.class, tags={ "condition-subscribe-rest-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserSubscribe.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/rest/subscribe/selectByUserConditionSubscribeMap",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<UserSubscribe> selectByUserConditionSubscribeMap(@ApiParam(value = "conditionSubscribeRequest", required = true) @Valid @RequestBody ConditionSubscribeRequest conditionSubscribeRequest);

}
