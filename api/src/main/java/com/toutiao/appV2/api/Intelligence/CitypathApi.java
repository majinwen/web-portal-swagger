/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.0-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.toutiao.appV2.api.Intelligence;


import com.toutiao.appV2.model.Intelligence.*;
import com.toutiao.appV2.model.StringDataResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-11-16T08:35:17.892Z")

@Api(value = "智能找房", description = "智能找房")
public interface CitypathApi {

    @ApiOperation(value = "取消收藏", nickname = "cancleMyReport", notes = "", response = String.class, tags={ "懂房帝找房报告", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/{citypath}/findhouse/dongfangdi/cancleMyReport/{reportId}",
        produces = "application/json",
//        consumes = "application/json",
        method = RequestMethod.GET)
    @ApiIgnore
    ResponseEntity<StringDataResponse> cancleMyReport(@ApiParam(value = "reportId", required = true) @PathVariable("reportId") String reportId);


    @ApiOperation(value = "收藏报告", nickname = "collectMyReport", notes = "", response = String.class, tags={ "懂房帝找房报告", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/{citypath}/findhouse/dongfangdi/collectMyReport",
        produces = "application/json",
        consumes = "*/*",
        method = RequestMethod.GET)
    @ApiIgnore
    ResponseEntity<StringDataResponse> collectMyReport(@NotNull @ApiParam(value = "reportId", required = true) @Valid @RequestParam(value = "reportId", required = true) String reportId);


    @ApiOperation(value = "查看我的报告", nickname = "getMyReport", notes = "", response = ReportResponse.class, tags={ "懂房帝找房报告", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = ReportResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/{citypath}/findhouse/dongfangdi/queryMyReport",
        produces = "application/json",
        consumes = "*/*",
        method = RequestMethod.GET)
    @ApiIgnore
    ResponseEntity<ReportResponse> getMyReport();


//    @ApiOperation(value = "跳转功能，跳转到选择类型页面", nickname = "goToStartRobot", notes = "", response = String.class, tags={ "懂房帝找房报告", })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = String.class),
//        @ApiResponse(code = 401, message = "Unauthorized"),
//        @ApiResponse(code = 403, message = "Forbidden"),
//        @ApiResponse(code = 404, message = "Not Found") })
//    @ApiImplicitParams({
//    })
//    @RequestMapping(value = "/{citypath}/findhouse/dongfangdi",
////        produces = "application/json",
////        consumes = "application/json",
//        method = RequestMethod.GET)
//    ResponseEntity<StringDataResponse> goToStartRobot();


    @ApiOperation(value = "区域筛选小区数量", nickname = "queryPlotCountByDistrict", notes = "", response = IntelligenceFh.class, tags={ "懂房帝找房报告", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = IntelligenceFh.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/{citypath}/findhouse/dongfangdi/queryPlotCountByDistrict",
        produces = "application/json",
        consumes = "application/json",
        method = RequestMethod.POST)
    @ApiIgnore
    ResponseEntity<IntelligenceFh> queryPlotCountByDistrict(@ApiParam(value = "intelligenceRequest", required = true) @Valid @RequestBody IntelligenceRequest intelligenceRequest);


//    @ApiOperation(value = "报告页价格趋势", nickname = "queryPt", notes = "", response = PriceTrendDo.class, tags={ "懂房帝找房报告", })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = PriceTrendDo.class),
//        @ApiResponse(code = 201, message = "Created"),
//        @ApiResponse(code = 401, message = "Unauthorized"),
//        @ApiResponse(code = 403, message = "Forbidden"),
//        @ApiResponse(code = 404, message = "Not Found") })
//    @ApiImplicitParams({
//    })
//    @RequestMapping(value = "/{citypath}/findhouse/dongfangdi/queryPt",
//        produces = "application/json",
//        consumes = "application/json",
//        method = RequestMethod.POST)
//    ResponseEntity<PriceTrendDo> queryPt(@ApiParam(value = "intelligenceRequest", required = true) @Valid @RequestBody IntelligenceRequest intelligenceRequest);


//    @ApiOperation(value = "报告页供需趋势", nickname = "queryTd", notes = "", response = PriceRatioDo.class, tags={ "懂房帝找房报告", })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = PriceRatioDo.class),
//        @ApiResponse(code = 201, message = "Created"),
//        @ApiResponse(code = 401, message = "Unauthorized"),
//        @ApiResponse(code = 403, message = "Forbidden"),
//        @ApiResponse(code = 404, message = "Not Found") })
//    @ApiImplicitParams({
//    })
//    @RequestMapping(value = "/{citypath}/findhouse/dongfangdi/queryTd",
//        produces = "application/json",
//        consumes = "application/json",
//        method = RequestMethod.POST)
//    ResponseEntity<PriceRatioDo> queryTd(@ApiParam(value = "intelligenceRequest", required = true) @Valid @RequestBody IntelligenceRequest intelligenceRequest);


    @ApiOperation(value = "用户筛选", nickname = "queryUserChoice", notes = "", response = IntelligenceFh.class, tags={ "懂房帝找房报告", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = IntelligenceFh.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/{citypath}/findhouse/dongfangdi/queryUserChoice",
        produces = "application/json",
        consumes = "application/json",
        method = RequestMethod.POST)
    @ApiIgnore
    ResponseEntity<IntelligenceFh> queryUserChoice(@ApiParam(value = "intelligenceRequest", required = true) @Valid @RequestBody IntelligenceRequest intelligenceRequest);


    @ApiOperation(value = "打开报告页数据信息", nickname = "showUserPortrayal", notes = "", response = IntelligenceResponse.class, tags={ "懂房帝找房报告", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = IntelligenceResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/{citypath}/findhouse/dongfangdi/showMyReport/{reportId}",
        produces = "application/json",
        consumes = "*/*",
        method = RequestMethod.GET)
    @ApiIgnore
    ResponseEntity<IntelligenceResponse> showUserPortrayal(@NotNull @ApiParam(value = "reportId", required = true) @Valid @RequestParam(value = "reportId", required = true) String reportId);


    @ApiOperation(value = "过渡页", nickname = "showUserPortrayal", notes = "", response = IntelligenceFhRes.class, tags={ "懂房帝找房报告", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = IntelligenceFhRes.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/{citypath}/findhouse/dongfangdi/showUserPortrayal",
        produces = "application/json",
        consumes = "application/json",
        method = RequestMethod.POST)
    @ApiIgnore
    ResponseEntity<IntelligenceFhRes> showUserPortrayal(@ApiParam(value = "intelligenceRequest", required = true) @Valid @RequestBody IntelligenceRequest intelligenceRequest);


//    @ApiOperation(value = "判断选择的类型，进行跳转", nickname = "xuanZeLeiXing", notes = "", response = String.class, tags={ "懂房帝找房报告", })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = String.class),
//        @ApiResponse(code = 401, message = "Unauthorized"),
//        @ApiResponse(code = 403, message = "Forbidden"),
//        @ApiResponse(code = 404, message = "Not Found") })
//    @ApiImplicitParams({
//    })
//    @RequestMapping(value = "/{citypath}/findhouse/dongfangdi/xuanzeleixing",
//        produces = "application/json",
//        consumes = "*/*",
//        method = RequestMethod.GET)
//    ResponseEntity<StringDataResponse> xuanZeLeiXing(@NotNull @ApiParam(value = "userType", required = true) @Valid @RequestParam(value = "userType", required = true) String userType);

}
